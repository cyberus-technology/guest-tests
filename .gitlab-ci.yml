include:
  # Taken from https://docs.gitlab.com/ee/ci/yaml/workflow.html#workflowrules-templates
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'

stages:
  - style
  - build
  - test

.build_regular_template: &build_regular_template
  stage: build
  image: gcc:12
  before_script:
    - apt-get update && apt-get install -y cmake ninja-build xorriso
  script:
    - mkdir build
    - cd build
    - cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX=./install -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE && ninja

# Gitlab CI environment template that enables Nix on the command line,
# including nix-build and nix-shell.
.nix_build_template: &nix_build_template
  interruptible: true
  tags:
    - native-nix-v2
  before_script:
    - git config --global --add url."${CI_SERVER_PROTOCOL}://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/".insteadOf "git@${CI_SERVER_HOST}:"
    - git config --global --add url."${CI_SERVER_PROTOCOL}://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/".insteadOf "ssh://git@${CI_SERVER_HOST}/"


style:format:
  <<: *nix_build_template
  stage: style
  script:
    - nix-shell --run "./scripts/format.sh --check"

build:regular_debug:
  <<: *build_regular_template
  variables:
    CMAKE_BUILD_TYPE: "Debug"

build:regular_release:
  <<: *build_regular_template
  variables:
    CMAKE_BUILD_TYPE: "Release"

build:nix:
  <<: *nix_build_template
  stage: build
  script:
    - nix-build -A tests && test -f result/lapic-timer.elf32
    - nix-build -A tests && test -f result/lapic-timer.elf64
    - nix-build -A tests && test -f result/lapic-timer.iso
    - nix-build -A tests.lapic-timer && test -f result/lapic-timer.elf32
    - nix-build -A tests.lapic-timer && test -f result/lapic-timer.elf64
    - nix-build -A tests.lapic-timer && test -f result/lapic-timer.iso
    - nix-build -A tests.lapic-timer.elf32 && test -h result
    - nix-build -A tests.lapic-timer.elf64 && test -h result
    - nix-build -A tests.lapic-timer.iso && test -h result

test:nix-shell:
  <<: *nix_build_template
  stage: test
  script:
    - nix-shell --pure --run "echo Works"

# All test use the same base to boot. Hence, we test here that the hello-world
# test comes up.

test:vm:hello-world-boots:multiboot1:
  <<: *nix_build_template
  stage: test
  variables:
    # For sotest-protocol-parser
    NIXPKGS_ALLOW_UNFREE: 1
  script:
    - nix-build nix/release.nix -A testRuns.qemu.kvm.multiboot.hello-world

test:vm:hello-world-boots:iso:
  <<: *nix_build_template
  stage: test
  variables:
    NIXPKGS_ALLOW_UNFREE: 1
  script:
    - nix-build nix/release.nix -A testRuns.qemu.kvm.iso.hello-world

test:vm:hello-world-boots:efi:
  <<: *nix_build_template
  stage: test
  variables:
    NIXPKGS_ALLOW_UNFREE: 1
  script:
    - nix-build nix/release.nix -A testRuns.qemu.kvm.efi.hello-world

test:vm:hello-world-boots:xen-pvh:
  <<: *nix_build_template
  stage: test
  variables:
    NIXPKGS_ALLOW_UNFREE: 1
  script:
    - nix-build nix/release.nix -A testRuns.chv.kvm.xen-pvh.hello-world

# We run all guest tests but allow them to fail. They are made for real
# hardware and our own virtualization solutions, which aren't tested here.
test:vm:all_guest_tests:
  <<: *nix_build_template
  stage: test
  # No real dependency but doesn't make sense to run without the basic tests.
  needs:
    - test:vm:hello-world-boots:multiboot1
    - test:vm:hello-world-boots:iso
    - test:vm:hello-world-boots:efi
    - test:vm:hello-world-boots:xen-pvh
  allow_failure: true
  variables:
    NIXPKGS_ALLOW_UNFREE: 1
  script:
    # This list is generated using:
    # nix-build nix/release.nix -A testNames && cat result | xargs -I {} printf "- nix-build nix/release.nix -A testRuns.qemu.chv.default.%s || true\n"
    - nix-build nix/release.nix -A testRuns.qemu.kvm.default.cpuid || true
    - nix-build nix/release.nix -A testRuns.qemu.kvm.default.debugport || true
    - nix-build nix/release.nix -A testRuns.qemu.kvm.default.emulator || true
    - nix-build nix/release.nix -A testRuns.qemu.kvm.default.emulator-syscall || true
    - nix-build nix/release.nix -A testRuns.qemu.kvm.default.exceptions || true
    - nix-build nix/release.nix -A testRuns.qemu.kvm.default.fpu || true
    - nix-build nix/release.nix -A testRuns.qemu.kvm.default.hello-world || true
    - nix-build nix/release.nix -A testRuns.qemu.kvm.default.lapic-modes || true
    - nix-build nix/release.nix -A testRuns.qemu.kvm.default.lapic-priority || true
    - nix-build nix/release.nix -A testRuns.qemu.kvm.default.lapic-timer || true
    - nix-build nix/release.nix -A testRuns.qemu.kvm.default.msr || true
    - nix-build nix/release.nix -A testRuns.qemu.kvm.default.pagefaults || true
    - nix-build nix/release.nix -A testRuns.qemu.kvm.default.pit-timer || true
    - nix-build nix/release.nix -A testRuns.qemu.kvm.default.sgx || true
    - nix-build nix/release.nix -A testRuns.qemu.kvm.default.sgx-launch-control || true
    - nix-build nix/release.nix -A testRuns.qemu.kvm.default.tsc || true
    - nix-build nix/release.nix -A testRuns.qemu.kvm.default.vmx || true
    - nix-build nix/release.nix -A testRuns.chv.kvm.default.cpuid || true
    - nix-build nix/release.nix -A testRuns.chv.kvm.default.debugport || true
    - nix-build nix/release.nix -A testRuns.chv.kvm.default.emulator || true
    - nix-build nix/release.nix -A testRuns.chv.kvm.default.emulator-syscall || true
    - nix-build nix/release.nix -A testRuns.chv.kvm.default.exceptions || true
    - nix-build nix/release.nix -A testRuns.chv.kvm.default.fpu || true
    - nix-build nix/release.nix -A testRuns.chv.kvm.default.hello-world || true
    - nix-build nix/release.nix -A testRuns.chv.kvm.default.lapic-modes || true
    - nix-build nix/release.nix -A testRuns.chv.kvm.default.lapic-priority || true
    - nix-build nix/release.nix -A testRuns.chv.kvm.default.lapic-timer || true
    - nix-build nix/release.nix -A testRuns.chv.kvm.default.msr || true
    - nix-build nix/release.nix -A testRuns.chv.kvm.default.pagefaults || true
    - nix-build nix/release.nix -A testRuns.chv.kvm.default.pit-timer || true
    - nix-build nix/release.nix -A testRuns.chv.kvm.default.sgx || true
    - nix-build nix/release.nix -A testRuns.chv.kvm.default.sgx-launch-control || true
    - nix-build nix/release.nix -A testRuns.chv.kvm.default.tsc || true
    - nix-build nix/release.nix -A testRuns.chv.kvm.default.vmx || true

test:sotest:submit:
  <<: *nix_build_template
  stage: test
  # No real dependency but doesn't make sense to run without the basic tests.
  needs:
    - test:vm:hello-world-boots:iso
    - test:vm:hello-world-boots:efi
  script:
    - nix-build nix/release.nix -A sotest
    - RUN_SOTEST=$(nix-build nix/cbspkgs.nix -A cyberus.cbspkgs.run-sotest --no-out-link)/bin/run_sotest
    - $RUN_SOTEST http://sotest:3000 result/project-config.yaml
      --boot_files "result/bundle.zip"
      --user "$CI_PROJECT_NAMESPACE - $GITLAB_USER_LOGIN"
      --url "$CI_PROJECT_URL/commit/$CI_COMMIT_SHA"
      --name "$CI_PROJECT_NAME $CI_COMMIT_REF_SLUG"
      --priority 0
      --testrun_id_file sotest_testrun_id.txt
      --nopoll
  artifacts:
    expire_in: 1 week
    paths:
      - sotest_testrun_id.txt

test:sotest:poll:
  <<: *nix_build_template
  stage: test
  needs:
    - test:sotest:submit
  timeout: 12h
  script:
    - POLL_SOTEST=$(nix-build nix/cbspkgs.nix -A cyberus.cbspkgs.run-sotest --no-out-link)/bin/poll_sotest
    - $POLL_SOTEST http://sotest:3000
      --id "$(cat sotest_testrun_id.txt)"
      --junit-xml sotest-report.xml
      --extract-records-to https://elastic.vpn.cyberus-technology.de
  artifacts:
    paths:
      - sotest-report.xml
    reports:
      junit: sotest-report.xml
    when: always
