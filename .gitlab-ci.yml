# Copyright Â© 2024 Cyberus Technology GmbH <contact@cyberus-technology.de>
#
# SPDX-License-Identifier: GPL-2.0-or-later

include:
  # Taken from https://docs.gitlab.com/ee/ci/yaml/workflow.html#workflowrules-templates
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'

stages:
  - check
  - build
  - test
  - optional_test

.common:
  interruptible: true
  before_script:
    - git config --global --add url."${CI_SERVER_PROTOCOL}://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/".insteadOf "git@${CI_SERVER_HOST}:"
    - git config --global --add url."${CI_SERVER_PROTOCOL}://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/".insteadOf "ssh://git@${CI_SERVER_HOST}/"


.build_regular_template:
  extends:
    - .common
  stage: build
  image: ubuntu:24.04
  before_script:
    - apt-get update && apt-get install -y git gcc-11 g++-11 cmake ninja-build
  script:
    - |
      # Set CXX version for CMake.
      export CC=gcc-11 # Keep in sync with Nix file.
      export CXX=g++-11
      echo -n "gcc version: "
      $CC --version | head -n 1
      echo -n "g++ version: "
      $CXX --version | head -n 1
      echo -n "cmake version: "
      cmake --version | head -n 1
    # Catch2 in version 3 is not available in the Ubuntu repository. So we
    # fetch and build it from source. This is luckily easy and cheap.
    - |
      echo '$CMAKE_BUILD_TYPE=' "$CMAKE_BUILD_TYPE"
      echo '$CMAKE_DO_TESTING=' "$CMAKE_DO_TESTING"
      if [[ $CMAKE_DO_TESTING == "On" ]]; then
          git clone https://github.com/catchorg/Catch2.git
          mkdir Catch2/build && cd Catch2/build
          cmake .. -G Ninja -DBUILD_TESTING=Off
          ninja
          ninja install
          cd - # exit Catch2/build
      fi
    - mkdir build && cd build
    - |
      cmake .. -G Ninja \
        -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
        -DBUILD_TESTING=$CMAKE_DO_TESTING
    - |
      ninja
      if [[ $CMAKE_DO_TESTING == "On" ]]; then
          ninja test
      fi

# Gitlab CI environment template that enables Nix on the command line,
# including nix-build and nix-shell.
.nix_build_template:
  extends:
    - .common
  tags:
    - native-nix

check:style:
  stage: check
  extends:
    - .nix_build_template
  needs: []
  dependencies: []
  script:
    - nix-build nix/release.nix -A pre-commit-check

check:nix-shell:
  extends:
    - .nix_build_template
  stage: check
  script:
    - nix-shell --pure --run "echo nix-shell works"

build:cmake:nix:
  stage: build
  extends:
    - .nix_build_template
  script:
    # Unit tests are tied to the CMake derivation. We manually deactivate it.
    - nix-build -E "(import nix/release.nix {}).tests.hello-world.elf32.cmakeProj.overrideAttrs({ doCheck = false; })"

build:cmake:regular_debug:
  stage: build
  extends:
    - .build_regular_template
  variables:
    CMAKE_DO_TESTING: "Off"
    CMAKE_BUILD_TYPE: "Debug"

build:cmake:regular_release:
  stage: build
  extends:
    - .build_regular_template
  variables:
    CMAKE_DO_TESTING: "Off"
    CMAKE_BUILD_TYPE: "Release"

.test:unit:cmake_template:
  stage: test
  extends:
    - .build_regular_template
  variables:
    CMAKE_DO_TESTING: "On"
  artifacts:
    when: always
    paths:
      - build/junit.xml
    reports:
      junit: build/junit.xml

test:unit:cmake_debug:
  extends:
    - .test:unit:cmake_template
  variables:
    CMAKE_BUILD_TYPE: "Debug"

test:unit:cmake_release:
  extends:
    - .test:unit:cmake_template
  variables:
    CMAKE_BUILD_TYPE: "Release"

test:unit:nix:
  extends:
    - .nix_build_template
  stage: test
  script:
    # Build the CMake project but this time with unit tests
    # (default behavior of the attribute)
    - nix-build nix/release.nix -A tests.hello-world.elf32
    - nix-build nix/release.nix -A unitTests.verifyTestsAttributeStructure
    - nix-build nix/release.nix -A unitTests.kernelCmdlineOfBootItemsCanBeOverridden

# All test use the same base to boot. Hence, we test here that the hello-world
# test comes up.

.test:vm:hello-world-boots_template:
  extends:
    - .nix_build_template
  stage: test
  # No real dependency but doesn't make sense to run without the basic tests.
  needs:
    - test:unit:nix
  variables:
    # For sotest-protocol-parser
    NIXPKGS_ALLOW_UNFREE: 1

test:vm:hello-world-boots:multiboot1:
  extends:
    - .test:vm:hello-world-boots_template
  script:
    - nix-build nix/release.nix -A testRuns.qemu.kvm.multiboot.hello-world

test:vm:hello-world-boots:iso:
  extends:
    - .test:vm:hello-world-boots_template
  script:
    - nix-build nix/release.nix -A testRuns.qemu.kvm.iso.hello-world

test:vm:hello-world-boots:iso-uefi:
  extends:
    - .test:vm:hello-world-boots_template
  script:
    - nix-build nix/release.nix -A testRuns.qemu.kvm.iso-uefi.hello-world

test:vm:hello-world-boots:efi:
  extends:
    - .test:vm:hello-world-boots_template
  script:
    - nix-build nix/release.nix -A testRuns.qemu.kvm.efi.hello-world

test:vm:hello-world-boots:xen-pvh:
  extends:
    - .test:vm:hello-world-boots_template
  script:
    - nix-build nix/release.nix -A testRuns.chv.kvm.xen-pvh.hello-world

# Optional manual step.
#
# We run all guest tests but allow them to fail. These runs are purely
# informative.
vmm_run:
  extends:
    - .nix_build_template
  stage: optional_test
  when: manual
  # No real dependency but doesn't make sense to run without the basic tests.
  needs:
    - test:vm:hello-world-boots:multiboot1
    - test:vm:hello-world-boots:iso
    - test:vm:hello-world-boots:efi
    - test:vm:hello-world-boots:xen-pvh
  allow_failure: true
  parallel:
    matrix:
      - VMM:
          - chv
          - qemu
        # Generated by running:
        # nix-build nix/release.nix -A testNames && \
        #   cat result | xargs -I {} echo - {}
        GUEST_TEST:
          - cpuid
          - emulator
          - emulator-syscall
          - exceptions
          - fpu
          # Already tested above.
          # - hello-world
          - lapic-modes
          - lapic-priority
          - lapic-timer
          - msr
          - pagefaults
          - pit-timer
          - sgx
          - sgx-launch-control
          - timing
          - tsc
          - vmx
  variables:
    NIXPKGS_ALLOW_UNFREE: 1
  script:
    - echo "Running ${GUEST_TEST} in ${VMM}/kvm"
    - nix-build nix/release.nix -A testRuns.${VMM}.kvm.default.${GUEST_TEST}

test:sotest:submit:
  extends:
    - .nix_build_template
  stage: test
  # No real dependency but doesn't make sense to run when the basic tests don't
  # succeed.
  needs:
    - test:vm:hello-world-boots:multiboot1
    - test:vm:hello-world-boots:efi
    - test:unit:cmake_debug
    - test:unit:cmake_release
  script:
    - nix-build nix/release.nix -A sotest
    - RUN_SOTEST=$(nix-build nix/cyberus/cbspkgs.nix -A cyberus.cbspkgs.run-sotest --no-out-link)/bin/run_sotest
    - $RUN_SOTEST http://sotest:3000 result/project-config.yaml
      --boot_files "result/bundle"
      --user "$CI_PROJECT_NAMESPACE - $GITLAB_USER_LOGIN"
      --url "$CI_PROJECT_URL/commit/$CI_COMMIT_SHA"
      --name "$CI_PROJECT_NAME $CI_COMMIT_REF_SLUG"
      --priority 0
      --testrun_id_file sotest_testrun_id.txt
      --nopoll
  artifacts:
    expire_in: 1 week
    paths:
      - sotest_testrun_id.txt

test:sotest:poll:
  extends:
    - .common
  tags:
    - sotest
  stage: test
  needs:
    - test:sotest:submit
  timeout: 12h
  script:
    - POLL_SOTEST=$(nix-build nix/cyberus/cbspkgs.nix -A cyberus.cbspkgs.run-sotest --no-out-link)/bin/poll_sotest
    - $POLL_SOTEST http://sotest:3000
      --id "$(cat sotest_testrun_id.txt)"
      --junit-xml sotest-report.xml
      --extract-records-to https://elastic.vpn.cyberus-technology.de:443/
  artifacts:
    paths:
      - sotest-report.xml
    reports:
      junit: sotest-report.xml
    when: always
